---
title: "Predicción de Abandono"
author: "Isidoro Garcia"
date: "2021"
output: pdf_document
urlcolor: blue
graphics: yes
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE, comment = NA, message = FALSE,
                      fig.width = 7, fig.height = 4, fig.align = "right")
```

```{r, warning=FALSE}
library(tidyverse)
library(data.table)
library(broom)
library(knitr)
library(lubridate)
library(RCT)
library(gamlr)
library(ranger)
library(tree)
library(parallel)
library(tidymodels)
library(randomForest)
```



## Contexto

Cell2Cell es una compañía de teléfonos celulares que intenta mitigar el abandono de sus usuarios. Te contratan para 1) Encontrar un modelo que prediga el abandono con acierto y para usar los insights de este modelo para proponer una estrategia de manejo de abandono.


Las preguntas que contestaremos son:

1. Se puede predecir el abandono con los datos que nos compartieron? 

Si se puede, tenemos datos que nos ayudan a ver que usuarios se quedaron y cuales abandonaron (churn). En promedio 29% de los clientes han abandonado entre 30 y 60 días después de su fecha de observación y el resto siguen siendo clientes. 

2. Cuáles son las variables que explican en mayor medida el abandono? 



3. Qué incentivos da Cell2Cell a sus usarios para prevenir el abandono?

4. Cuál es el valor de una estrategia de prevención de abandono focalizada y cómo difiere entre los segmentos de los usuarios? Qué usuarios deberían de recibir incentivos de prevención? Qué montos de incentivos

Nota: Voy a evaluar las tareas con base en la respuesta a cada pregunta. Como hay algunas preguntas que no tienen una respuesta clara, al final ponderaré de acuerdo al poder predictivo de su modelo vs las respuestas sugeridas. 



\newpage

## Datos

Los datos los pueden encontrar en `Cell2Cell.Rdata`. En el archivo `Cell2Cell-Database-Documentation.xlsx` pueden encontrar documentación de la base de datos. 

Cargemos los datos
```{r cargamos los datos}

load('C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/data/Cell2Cell.Rdata')


```

### 1. Qué variables tienen missing values? Toma alguna decisión con los missing values. Justifica tu respuesta

Hay muy pocos missing values, vamos a eliminarlos todos.

```{r missing values, echo=TRUE}
faltantes <- map_dbl(cell2cell%>%select_all, function(x) 100*sum(is.na(x))/nrow(cell2cell))
faltantes <- data.frame(faltantes[faltantes>0])

colnames(faltantes) <- "Porcentaje Faltantes"

faltantes <- faltantes %>% 
  arrange(desc(`Porcentaje Faltantes`))

kable(faltantes, caption = "Tabla para variables NA",
      col.names = c("Porcentaje"), 
      digits = 3)



```

Hay pocas observaciones faltantes, distribuidas en las siguientes columnas:
  recchrge - recurring charge, el valor promedio del plan de consumo;
  overage - el exceso de minutos de llamadas;
  roam - el número de llamadas en roaming;
  changem - el cambio % en la utilización de minutos;
  changer - el cambio % en el gasto; 
  revenue - el gasto promedio; 
  mou - los minutos utilizados por mes;
  phones - el número de teléfonos que el usario ha utilizado;
  models - el número de modelos de teléfono que el usuario ha utilizado;
  age1 - la edad del 1er miembro del hogar;
  age2 - la edad del 2do miembro del hogar;
  eqpdays - el número de dias com el teléfono; y
  directas - el número promedio de llamadas con asistencia.
Hay observaciones que no podemos estimar o soponer y, así, se propone quitarlas
de la base. Son las observaciones contenidas en: recchrge, overage, changem, 
changer, eqpdays, revenue y mou.
Otras observaciones podemos suponer que los NAs serían 0 (roam y directas) o que 
tienen el valor de 1 (phones y models. O sea, se supone que el usurario ha 
tenido apenas un teléfono con la comopañia).
La variable de edad (age1 y age2) tiene pocos NAs, pero presenta vários valores
iguales a 0 (más de 20 mil observaciones). Así, se propone sustituyer los NAs y
los valores 0 por el promedio.
Además de NAs, la variable de días con el equipo (eqpdays) y de costo del plan 
(rechchrege) presentan unos pocos valores negativos que no hacen sentido. 
Se propone quitar los valores negativos de la base. 



```{r quitamos NA y reemplazamos datos}

# Quitando de la base
cell2cell <- cell2cell %>%
  filter(!is.na(changem),
         !is.na(changer),
         !is.na(revenue),
         !is.na(mou),
         !is.na(recchrge),
         !is.na(overage),
         !is.na(eqpdays))

# Igualando a 0 o 1
cell2cell$roam[cell2cell$roam == "NA"] <- 0
cell2cell$directas[cell2cell$directas == "NA"] <- 0
cell2cell$phones[cell2cell$phones == "NA"] <- 1
cell2cell$models[cell2cell$models == "NA"] <- 1


# Igualando al promedio
cell2cell$age1[cell2cell$age1 == 0] <- mean(cell2cell$age1)
cell2cell$age1[cell2cell$age2 == 0] <- mean(cell2cell$age2)
cell2cell$age1[is.na(cell2cell$age1)] <- mean(cell2cell$age1, na.rm = T)
cell2cell$age2[is.na(cell2cell$age2)] <- mean(cell2cell$age2, na.rm = T)

# Quitando valores negativos de la base
cell2cell <- cell2cell[cell2cell$eqpdays > 0 & cell2cell$recchrge >0]

# Verificando que no quedan más NAs
faltantes <- map_dbl(cell2cell%>%select_all, function(x) 100*sum(is.na(x))/nrow(cell2cell))
faltantes <- data.frame(faltantes[faltantes>0])

colnames(faltantes) <- "Porcentaje Faltantes"

faltantes <- faltantes %>% 
  arrange(desc(`Porcentaje Faltantes`))

kable(faltantes, caption = "Tabla para variables NA",
      col.names = c("Porcentaje"), 
      digits = 3)



```




### 2. Tabula la distribución de la variable `churn`. Muestra la frecuencia absoluta y relativa. Crees que se debe hacer oversampling/undersamping?  

Conviene hacer undersampling, ya que los datos del estudio de interés son la mitad de los que tenemos en el otro grupo.
Por lo tanto creo será mejor así. Además evitamos generar variables sintéticas.

```{r}


absoluto <- table(cell2cell$churn, useNA = 'always')
absoluto
relativo <- prop.table(x=absoluto)
relativo

dist <- rbind(absoluto, relativo)
dist <- as.data.frame(dist)
dist
kable(dist, caption = "Tabla de distribuciones para la variable Churn",
      col.names = c("{churn = 0}", "{churn = 1}", "NA's"), 
      digits = 2)



```



### 3. (2 pts) Divide tu base en entrenamiento y validación (80/20). Además, considera hacer oversampling (SMOTE) o undersampling. (Tip: Recuerda que el objetivo final es tener muestra ~balanceada en el traning set. En el validation la distribución debe ser la original)


Vamos a hacer el Undersampling. Para esto sólo necesitamos utilizar la librería sample incluida en R.
Esto nos permite tomar muestras aleatorias, unicamente hay que decirle de que tamaño, en este caso serán del grupo más chico (los que se abandonaron o churn=1).

```{r}
# Vamos a partir de nuevo nuestro set en entrenamiento y validación
train_rows_under <- sample(dim(cell2cell)[1],size = round(dim(cell2cell)[1]*.80,2),
                                     replace = F)

train_under <- cell2cell[train_rows_under, ]
test_under <- cell2cell[-train_rows_under, ]
train_y_under <- cell2cell$churn[train_rows_under]
test_y_under <- cell2cell$churn[-train_rows_under]

churn_si <- which(train_under$churn == 1)
churn_no <- which(train_under$churn == 0)

nsamp <- min(length(churn_si), length(churn_no))

churn_si <- sample(churn_si, nsamp)
churn_no <- sample(churn_no, nsamp)

validation_under <- train_under[c(churn_si, churn_no), ]


# Vamos a verificar que sólo el set de entrenamiento tiene el balanceo y el set de validación tiene la proporción original
absoluto_under <- table(validation_under$churn, useNA = 'always')
absoluto_under
relativo_under <- prop.table(x=absoluto_under)
relativo_under

dist_under <- rbind(absoluto_under, relativo_under)
training_under <- as.data.frame(dist_under)

kable(training_under, caption = "Tabla de distribuciones para la variable churn, undersamplin (train set)",
      col.names = c("{churn = 0}", "{churn = 1}", "NA's"), 
      digits = 2)

absoluto_under <- table(test_under$churn, useNA = 'always')
absoluto_under
relativo_under <- prop.table(x=absoluto_under)
relativo_under

dist_under <- rbind(absoluto_under, relativo_under)
validation_under <- as.data.frame(dist_under)

kable(validation_under, caption = "Tabla de distribuciones para la variable churn, undersamplin (validation set)",
      col.names = c("{churn = 0}", "{churn = 1}", "NA's"), 
      digits = 2)


```


## Model estimation

Pondremos a competir 3 modelos: 

1. Cross-Validated LASSO-logit

2. Prune Trees

3. Random Forest

### 4 (2 pts). Estima un cross validated LASSO. Muestra el la gráfica de CV Binomial Deviance vs Complejidad

Vamos a realizar el CV LASSO-logit para el set de entrenamiento partido normal y el partido undersampling.
Eso nos permitirá ver la diferencia en los estimadores si no consideramos esto.

```{r}

#train_y# variable Y partida normal
#train_y_under # variable Y partida undersampling

# vamos a quitarle a los sets de entrenamiento las Y's



train_under <- select(train_under, -customer, -churn)

X_under <- sparse.model.matrix(~.+0, data = train_under)

detectCores()
cl<-makeCluster(4)
cl
lasso_under <- cv.gamlr(x=X_under, y=train_y_under, family = 'binomial', nfold = 5, standarize = TRUE)

stopCluster(cl)

save(lasso_under, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/cv_lasso_under.Rdata")

```


### 5. Grafica el Lasso de los coeficientes vs la complejidad del modelo.   

```{r}

load("C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/cv_lasso_under.Rdata")

plot(lasso_under)
plot(lasso_under$gamlr)



```



\newpage

### 6 (2 pts). Cuál es la $\lambda$ resultante? Genera una tabla con los coeficientes que selecciona el CV LASSO. Cuántas variables deja iguales a cero? Cuales son las 3 variables más importantes para predecir el abandono? Da una explicación intuitiva a la última pregunta


Las 3 variables, sin contar el intercepto, con mayor importancia son: retcall, creditaa, refurb.
- retcall: llamadas realizadas por el cliente al equipo de retención
- creditaa: riesgo de crédito aa \{1=si\}
- refurb: si el auricular está reacondicionado para su venta, es decir equipos devueltos al fabricante, reparados y revendidos.

A priori, podríamos pensar que los clientes que marcaron al equipo de retencion buscan alguna promoción para no irse y al no conseguiirla abandonan, adicionalmente aquellos que tienen un mayor riesgo crediticio aa disminuye la probabilidad de irse. Por último aquellos que tienen equipos revendidos pueden ser más suceptibles a abandonar debido a que sus equipos son más baratos y por lo tanto de menor calidad, provocando que su servicio sea malo y por último se vayan antes.

```{r}

lambda_min_under <- (lasso_under$lambda.min) 
lambda_1std_under <-(lasso_under$lambda.1se) 

cat("La Lambda que minimiza el modelo es: ",lambda_min_under,"\n")
cat("La Lambda que 1 Std del modelo es: ",lambda_1std_under,"\n")

tabla_lambda <- rbind(lambda_min_under, lambda_1std_under)

kable(tabla_lambda, caption = "Lambdas del modelo (under = undersample)",
      col.names = c("Lambda"), 
      digits = 8)


# Veamos los coeficientes
coefs <- as.matrix(coef(lasso_under))
coefs <- as.data.frame(coefs)
coefs$abs <- abs(coefs$seg58)

coefs <- coefs %>% 
  arrange(desc(abs))

coefs_mas <- head(coefs, 4)
kable(coefs_mas, caption = "Coeficientes con mayor peso",
      col.names = c("Coeficiente", "|Coeficiente|"),
      ddigits = 3)



```


### 7. Genera un data frame (usando el validation set) que tenga: `customer`, `churn` y las predicciones del LASSO. 

```{r pred y roc logit cv lasso}

#Prediccion en Base de Validacion
# Prediction Vectors


test_under<- select(test_under, -customer, -churn)

X_validation <- sparse.model.matrix(~.+0, data=test_under)



prediccion_1 <- drop(predict(lasso_under$gamlr, X_validation,
                      type='response',
                      select = lasso_under$seg.min))


prediccion_2 <- drop(predict(lasso_under$gamlr, X_validation,
                      type='response',
                      select = lasso_under$seg.1se))

#response es el score de probabilidad, la prediccion del Lasso
#Que escoja el segmento minimo (donde se minimiza el error de pred fuera de la muesta)

eval_1 <- bind_cols(test_y_under, prediccion_1)
predicciones <- eval_1
customer <- cell2cell[-train_rows_under, ]
customer <- select(customer, customer)
predicciones$customer <- customer
colnames(predicciones) <- cbind("obs","lasso_cvmin","customer")

colnames(eval_1) <- cbind("obs","lasso_cvmin","customer")
eval_1$obs <- as.factor(eval_1$obs)

eval_2 <- bind_cols(test_y_under, prediccion_2)
colnames(eval_2) <- cbind("obs","lasso_cv1sd")
eval_2$obs <- as.factor(eval_2$obs)


library(tidymodels) #Para la curva ROC
library(ROCR)

curva_1 <- roc_curve(data = eval_1, truth = obs, "lasso_cvmin")
curva_2 <- roc_curve(data = eval_2, truth = obs, "lasso_cv1sd")

#truth es la columna donde esta la y observada, la otra entrada es para epecificar cual es la clase positiva.


#Lo que te sale de esta funcion no es una curva, si no una tabla con la especificidad y sensibilidad resultantes para cada corte de probabilidad


# Para graficar la curva ROC
curva_roc_1 <- ggplot(curva_1, aes(x=specificity, y=sensitivity))+
  geom_abline(slope = -1, intercept = 1, linetype= 'dashed')+
  geom_path()+ # Para graficar el continuio de puntos
  theme_bw()


curva_roc_2 <- ggplot(curva_2, aes(x=specificity, y=sensitivity))+
  geom_abline(slope = -1, intercept = 1, linetype= 'dashed')+
  geom_path()+ # Para graficar el continuio de puntos
  theme_bw()

curva_roc_1
curva_roc_2

#ggsave(height = 6, width = 6, filename = "Graficas/roc_lasso.png")



# Para calcular el area debajo de la curva.
AUC_1 <- roc_auc(eval_1, truth = obs, "lasso_cvmin")
AUC_2 <- roc_auc(eval_2, truth = obs, "lasso_cv1sd")

AUC_1
AUC_2

cat("El AUC del modelo de lambda minima es: ",AUC_1$.estimate,"\n",
    "El AUC del modelo de lambda 1 Std es: ",AUC_2$.estimate,"\n",
    "Por lo tanto: un chimpance aventando dardos lo hubiera hecho mejor")



```


### 8. Estima ahora tree. Usa `mindev = 0.05, mincut = 1000` Cuántos nodos terminales salen? Muestra el summary del árbol

```{r arbol}

dfarbol <- cbind(train_y_under, train_under)
y_arbol <- as.factor(train_y_under)
dfarbol$y_arbol <- y_arbol
dfarbol <- select(dfarbol, -train_y_under)
detectCores()
cl<-makeCluster(4)
cl
arbol <- tree(y_arbol ~. , data = dfarbol, mincut = 1000, mindev = 0.05)

stopCluster(cl)
save(arbol, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/arbol.Rdata")

summary(arbol)

```


### 9. Grafica el árbol resultante 

```{r grafica arbol}

plot(arbol); text(arbol)

```


### 10. Poda el árbol usando CV. Muestra el resultado. Grafica Tree Size vs Binomial Deviance. Cuál es el mejor tamaño del árbol? Mejora el Error?


```{r}


detectCores()
cl<-makeCluster(4)
arbol_2 <- tree(y_arbol ~. , data = dfarbol)

cv_arbol<-cv.tree(arbol_2, K= 10)
stopCluster(cl)

save(arbol_2, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/arbol2.Rdata")
save(cv_arbol, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/cv_arbol.Rdata")


summary(arbol_2)
summary(cv_arbol)

plot(cv_arbol$dev)


```



### 11. Gráfica el árbol final. (Tip: Checa `prune.tree`)

```{r}

pr_arbol <- prune.tree(arbol_2, best = 2)
plot(pr_arbol); text(pr_arbol); 

```



### 12. Genera las predicciones del árbol pruned. Guardalas en la base de predicciones. Guarda el score y la prediccion categorica en la misma data frame donde guardaste las predicciones del LASSO

```{r}

prediccion_pr <- predict(pr_arbol,
                        newdata = test_under,
                        type = 'class')

prediccion_pr2 <- predict(pr_arbol,
                        newdata = test_under,
                        type = 'vector')


predicciones$pruned_tree <- prediccion_pr
score <- predicciones[,1:3]
score <- select(score, -lasso_cvmin)
score$pruned_score <- prediccion_pr2
predicciones$pruned_score <- score$pruned_score

```



### 13 (4pts). Corre un Random Forest ahora. Cuál es la $B$ para la que ya no ganamos mucho más en poder predictivo?

- Corre para `num.trees=100,200,300, 500, 700, 800`

- En cada caso, guarda únicamente el `prediction.error`

```{r con p}
p <- ncol(train_under)
p
p2 <- p/2
p2
m <- sqrt(p)
m <- round(m, digits = 0)
m
num_arb <- c(100, 200, 300, 500, 700, 800)
B <- c(p, p2, m)

detectCores()
cl<-makeCluster(4)
cl
inicio <- Sys.time()

a_100_p<-Sys.time()
rf_100_p<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 100, mtry = p, importance = 'impurity')
a_100_p <- Sys.time()-a_100_p

a_200_p<-Sys.time()
rf_200_p<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 200, mtry = p, importance = 'impurity')
a_200_p <- Sys.time()-a_200_p

a_300_p<-Sys.time()
rf_300_p<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 300, mtry = p, importance = 'impurity')
a_300_p <- Sys.time()-a_300_p

a_500_p<-Sys.time()
rf_500_p<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 500, mtry = p, importance = 'impurity')
a_500_p <- Sys.time()-a_500_p

a_700_p<-Sys.time()
rf_700_p <-ranger(train_y_under~., data = train_under, classification = T, num.trees = 700, mtry = p, importance = 'impurity')
a_700_p <- Sys.time()-a_700_p

a_800_p<-Sys.time()
rf_800_p<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 800, mtry = p, importance = 'impurity')
a_800_p <- Sys.time()-a_800_p


a_100_m<-Sys.time()
rf_100_m<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 100, mtry = m, importance = 'impurity')
a_100_m <- Sys.time()-a_100_m

a_200_m<-Sys.time()
rf_200_m<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 200, mtry = m, importance = 'impurity')
a_200_m <- Sys.time()-a_200_m

a_300_m<-Sys.time()
rf_300_m<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 300, mtry = m, importance = 'impurity')
a_300_m <- Sys.time()-a_300_m

a_500_m<-Sys.time()
rf_500_m<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 500, mtry = m, importance = 'impurity')
a_500_m <- Sys.time()-a_500_m

a_700_m<-Sys.time()
rf_700_m<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 700, mtry = m, importance = 'impurity')
a_700_m <- Sys.time()-a_700_m

a_800_m<-Sys.time()
rf_800_m<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 800, mtry = m, importance = 'impurity')
a_800_m <- Sys.time()-a_800_m


a_100_p2<-Sys.time()
rf_100_p2<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 100, mtry = p2, importance = 'impurity')
a_100_p2 <- Sys.time()-a_100_p2

a_200_p2<-Sys.time()
rf_200_p2<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 200, mtry = p2, importance = 'impurity')
a_200_p2 <- Sys.time()-a_200_p2

a_300_p2<-Sys.time()
rf_300_p2<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 300, mtry = p2, importance = 'impurity')
a_300_p2 <- Sys.time()-a_300_p2

a_500_p2<-Sys.time()
rf_500_p2<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 500, mtry = p2, importance = 'impurity')
a_500_p2 <- Sys.time()-a_500_p2

a_700_p2<-Sys.time()
rf_700_p2<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 700, mtry = p2, importance = 'impurity')
a_700_p2 <- Sys.time()-a_700_p2

a_800_p2<-Sys.time()
rf_800_p2<-ranger(train_y_under~., data = train_under, classification = T, num.trees = 800, mtry = p2, importance = 'impurity')
a_800_p2 <- Sys.time()-a_800_p2

fin <- Sys.time()-inicio


stopCluster(cl)

oob_100_p <- rf_100_p$prediction.error
oob_200_p <- rf_200_p$prediction.error
oob_300_p <- rf_300_p$prediction.error
oob_500_p <- rf_500_p$prediction.error
oob_700_p <- rf_700_p$prediction.error
oob_800_p <- rf_800_p$prediction.error
oob_100_p2 <- rf_100_p2$prediction.error
oob_200_p2 <- rf_200_p2$prediction.error
oob_300_p2 <- rf_300_p2$prediction.error
oob_500_p2 <- rf_500_p2$prediction.error
oob_700_p2 <- rf_700_p2$prediction.error
oob_800_p2 <- rf_800_p2$prediction.error
oob_100_m <- rf_100_m$prediction.error
oob_200_m <- rf_200_m$prediction.error
oob_300_m <- rf_300_m$prediction.error
oob_500_m <- rf_500_m$prediction.error
oob_700_m <- rf_700_m$prediction.error
oob_800_m <- rf_800_m$prediction.error

oob_p <- rbind(oob_100_p, oob_200_p, oob_300_p, oob_500_p, oob_700_p, oob_800_p)
oob_p2 <- rbind(oob_100_p2, oob_200_p2, oob_300_p2, oob_500_p2, oob_700_p2, oob_800_p2)
oob_m <- rbind(oob_100_m, oob_200_m, oob_300_m, oob_500_m, oob_700_m, oob_800_m)

oob <- cbind(oob_p, oob_p2, oob_m)
rmse <- cbind(num_arb, oob) 

colnames(rmse) <- cbind("num","p","p2","sqrtp")
rmse <- as.data.frame(rmse)

library(ggthemes)

ggrmse <- ggplot(data = rmse)+
  geom_line(aes(x=num, y=p), color = 'red')+
  geom_line(aes(x=num, y=p2), color = 'blue')+
  geom_line(aes(x=num, y=sqrtp), color = 'green')+
  labs(title = "Error de predicción OOB para diferentes #cols",
       subtitle = "Rojo = p, Azul = p/2, Verde = raiz(p)",
       x = "Número de arboles", y = "Error cuadrático medio")+
  scale_x_continuous(limits = c(100,800), breaks = seq(100,800, by=100))

ggrmse + theme_economist()+
  scale_color_economist()

ggsave(ggrmse, filename = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/graphs/rmse_rf.jpeg")

```


```{r guardar modelos}

save(rf_100_m, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf100_m.Rdata")
save(rf_200_m, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf200_m.Rdata")
save(rf_300_m, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf300_m.Rdata")
save(rf_500_m, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf500_m.Rdata")
save(rf_700_m, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf700_m.Rdata")
save(rf_800_m, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf800_m.Rdata")
save(rf_100_p, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf100_p.Rdata")
save(rf_200_p, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf200_p.Rdata")
save(rf_300_p, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf300_p.Rdata")
save(rf_500_p, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf500_p.Rdata")
save(rf_700_p, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf700_p.Rdata")
save(rf_800_p, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf800_p.Rdata")
save(rf_100_p2, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf100_p2.Rdata")
save(rf_200_p2, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf200_p2.Rdata")
save(rf_300_p2, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf300_p2.Rdata")
save(rf_500_p2, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf500_p2.Rdata")
save(rf_700_p2, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf700_p2.Rdata")
save(rf_800_p2, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf800_p2.Rdata")



```



### 14. Escoge un random forest para hacer las predicciones. Grafica la importancia de las variables. Interpreta 

Elegimos el rf de 700 arboles con p/2 columnas. Es el que dio el menor error cuadrático medio.


```{r}

load("C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/modelo_win/rf700_p2.Rdata")

importance <- rf_800_p2$variable.importance
importance <- as.data.frame(importance)

importance <-  importance %>% 
  arrange(desc(importance))

colnames(importance) <- cbind("importance")

kable(importance, caption = "Variable importance del mejor modelo", 
      digits = 2)


```


### 15. Genera las predicciones OOS para el random forest. Guardalas en la misma data.frame que los otros modelos 

```{r}

pred_700_p2 <- predict(rf_700_p2, data = test_under, type = 'response')
predicciones$rf <- pred_700_p2$predictions


```


### 16 (2pts). Corre el mismo forest pero ahora con `probability = T`. Esto generará predicciones númericas en lugar de categóricas. Genera las predicciones continuas y guardalas en el mismo data frame

```{r}

rf_prob<-ranger(train_y_under~., data = train_under, classification = T, 
                  num.trees = 700, mtry = p2, importance = 'impurity',
                  probability = TRUE)

#rf_prob <- rf_700_p2_PROB

save(rf_prob, file = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/models/rf_prob.Rdata")

pred_rf_prob <- predict(rf_prob, data = test_under, type = 'response')
predicciones$rf_prob <- pred_rf_prob$predictions

```


### 17 (4 pts). Genera graficas de las curvas ROC para los tres modelos. Cual parece ser mejor?

```{r}

predicciones$obs <- as.factor(predicciones$obs)
predicciones$pruned_score <- predicciones$pruned_score[,1]
predicciones$rf_prob <- predicciones$rf_prob[,1]

roc_lasso <- roc_curve(data = predicciones, truth = obs, "lasso_cvmin")

roc_tree <- roc_curve(data = predicciones, truth = obs, "pruned_score")

roc_rf <- roc_curve(data = predicciones, truth = obs, "rf_prob")

# Para graficar la curva ROC del LASSO

gg_roclasso <- ggplot(roc_lasso, aes(x=specificity, y=sensitivity))+
  geom_abline(slope = -1, intercept = 1, linetype= 'dashed')+
  geom_path()+ 
  labs(title = "Curva Roc",
       subtitle = "Modelo Logit Lasso CV",
       x = "Especificidad", y = "Sensibilidad")

gg_roclasso + theme_economist()+
  scale_color_economist()

ggsave(gg_roclasso, filename = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/graphs/roc_lasso.jpeg")

gg_roctree <- ggplot(roc_tree, aes(x=specificity, y=sensitivity))+
  geom_abline(slope = -1, intercept = 1, linetype= 'dashed')+
  geom_path()+ 
  labs(title = "Curva Roc",
       subtitle = "Modelo pruned tree",
       x = "Especificidad", y = "Sensibilidad")

gg_roctree + theme_economist()+
  scale_color_economist()

ggsave(gg_roctree, filename = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/graphs/roc_tree.jpeg")


gg_rocrf <- ggplot(roc_rf, aes(x=specificity, y=sensitivity))+
  geom_abline(slope = -1, intercept = 1, linetype= 'dashed')+
  geom_path()+ 
  labs(title = "Curva Roc",
       subtitle = "Modelo Random Forest",
       x = "Especificidad", y = "Sensibilidad")

gg_rocrf + theme_economist()+
  scale_color_economist()

ggsave(gg_rocrf, filename = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/graphs/roc_rf.jpeg")

```



### 18. Genera una tabla con el AUC ROC. Cuál es el mejor modelo ? 


```{r}
auc_lasso <- roc_auc(data = predicciones, truth = obs, "lasso_cvmin")
auc_tree <- roc_auc(predicciones, truth = obs, "pruned_score")
auc_rf <- roc_auc(predicciones, truth = obs, "rf_prob")

auc_lasso
auc_tree
auc_rf

cat("El AUC más grande es el del RF con:", auc_rf$.estimate,"\n",
    "seguido por el pruned_tree con:", auc_tree$.estimate, "\n",
    "y en último lugar el logit lasso cv con:", auc_lasso$.estimate)

```


### 19 (2pts). Escoge un punto de corte para generar predicciones categoricas para el LASSO basado en la Curva ROC. Genera las matrices de confusión para cada modelo. Compáralas. Qué tipo de error es mas pernicioso? 



Queremos que nuestro modelo sea mas sensible que especifico debido a que es mas importante controlar los falsos negativos (error del tipo 2), que los falsos positivos (error del tipo 1). 

El error tipo 1 es predecir que se va un cliente y que en realidad no se iba a ir. Es decir asignar ineficientemente recursos limitados en donde no se necesitaba.

El error tipo 2 es no predecir que se va un cliente y que si se te vaya. Creemos que el esfuerzo tiene que concentrarse en la sensibilidad, que quienes decimos que se van, encontrarlos realmente. 

$ sensibilidad = \frac{Verdadero \: positivo}{Falsos \: negativos + Verdadero \: positivo}  $

El falso negativo es decir que el cliente no se va, no enfocar esfuerzos y que se termine yendo.




```{r}

p_star <- 0.25
# Generamos las predicciones de abandono con base en el corte de probabilidad
abandono <- predicciones%>%
  mutate(abandono_lasso = factor(if_else(lasso_cvmin>=p_star,1,0)),
         abandono_tree = factor(if_else(pruned_score>=p_star,1,0)),
         abandono_rf = factor(if_else(rf_prob>=p_star,1,0)))%>%
  select(obs, abandono_lasso, abandono_tree, abandono_rf, lasso_cvmin, 
         pruned_score,rf_prob)
# Generamos las matrices de confusion
confusion_mat_lasso <- data.frame(conf_mat(abandono%>%select(obs, abandono_lasso), obs, abandono_lasso)$table)

#confusion_mat_tree <- data.frame(conf_mat(abandono%>%select(obs, abandono_tree), obs, abandono_tree)$table)

#confusion_mat_rf <- data.frame(conf_mat(abandono%>%select(obs, abandono_rf), obs, abandono_rf)$table)


confusion_mat_lasso



```



### 20 (2pts). Finalmente, construye una lift table. Esto es, para 20 grupos del score predecido, genera 1) El promedio de las predicciones, 2) el promedio del churn observado. Existe monotonía? El mejor algoritmo es monotónico? (Tip: usa `ntile` para generar los grupos a partir de las predicciones)


```{r}


lift_table_rf <- abandono%>%select(obs, rf_prob, abandono_rf)%>%
  mutate_at(c("obs","rf_prob","abandono_rf"), ~as.numeric(.))%>%
  mutate(score = as.integer(ntile(rf_prob, n=20)),
         obs = case_when(obs==1~0,
                           obs==2~1),
         abandono_rf = case_when(abandono_rf==1~0,
                                    abandono_rf==2~1))%>%
  group_by(score)%>%
  summarise(observado = mean(obs)*100,
            prediccion = mean(abandono_rf)*100)%>%
  pivot_longer(cols = c(observado,prediccion))
# Grafica
modelo_rf <- ggplot(lift_table_rf, aes(x=score, y=value, fill=name))+
  geom_point(shape=21, size=2)+
  geom_path()+
  labs(title = "Modelo Random Forest",
       x="Cuantil de Probabilidad de Abandono (20 Grupos)",
       y = "Porcentaje")+
  theme_bw()+
  theme(axis.text = element_text(size=12), text = element_text(size=12), legend.position = "bottom")

ggsave(modelo_rf, filename = "C:/Users/52555/Documents/Maestría en economía/Economía computacional/Tarea 2/graphs/modelo_rf.jpeg")
```



### 21. Concluye. Que estrategia harías con este modelo? Cómo generarías valor a partir de el?


